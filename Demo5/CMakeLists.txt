cmake_minimum_required (VERSION 2.8)

project (Demo5)

# define the variable
# set (CMAKE_INCLUDE_CURRENT_DIR ON)
set(CMAKE_INSTALL_PREFIX "./usr")

# add the configuration head file
# the "config.h" is generated by the "config.h.in"
configure_file (
  "${PROJECT_SOURCE_DIR}/config.h.in"
  "${PROJECT_BINARY_DIR}/config.h"
  )
 
# option(<option_variable> "<help_string>" [initial_value])
option (USE_MYMATH
	   "Use provided math implementation" ON)

# 是否加入 MathFunctions 库
if (USE_MYMATH)
  # denote the directory of head files during the compilation
  include_directories ("${PROJECT_SOURCE_DIR}/math")
  # add CMakeList.txt sub-directory
  add_subdirectory (math)
  # define variable "EXTRA_LIBS"
  set (EXTRA_LIBS ${EXTRA_LIBS} MathFunctions)
endif (USE_MYMATH)

# aux_source_directory(dir VARIABLE)
# search the source files in the directory and all sub-directorys
aux_source_directory(. DIR_SRCS)

# add_executable(target_name [source1] [source2] ...)
add_executable(Demo5 ${DIR_SRCS})
# target_link_libraries(target_name [PRIVATE|PUBLIC|INTERFACE] library1 [library2 ...])
# link the targeted executable file and libraries
target_link_libraries (Demo5  ${EXTRA_LIBS})

# install(TARGETS <target1> <target2> ...
#         [[ARCHIVE|LIBRARY|RUNTIME|FRAMEWORK|BUNDLE|PRIVATE_HEADER|PUBLIC_HEADER|RESOURCE]
#             [DESTINATION <dir>]
#             [PERMISSIONS permissions...]
#             [CONFIGURATIONS [Debug|Release|...]]
#             [COMPONENT <component>]
#             [OPTIONAL]
#             [EXCLUDE_FROM_ALL]
#             [NAMELINK_SKIP]
#             [NAMELINK_ONLY]
#             [INCLUDES DESTINATION [<dir> ...]]
#         ] [...]
# )
install (TARGETS Demo5 DESTINATION bin)

# install(FILES <files...> DESTINATION <dir>)
install (FILES "${PROJECT_BINARY_DIR}/config.h"
         DESTINATION include)

# # 启用测试
# enable_testing()

# # 测试程序是否成功运行
# add_test (test_run Demo 5 2)

# # 测试帮助信息是否可以正常提示
# add_test (test_usage Demo)
# set_tests_properties (test_usage
#   PROPERTIES PASS_REGULAR_EXPRESSION "Usage: .* base exponent")

# # 测试 5 的平方
# # add_test (test_5_2 Demo 5 2)

# # set_tests_properties (test_5_2
# #  PROPERTIES PASS_REGULAR_EXPRESSION "is 25")

# # 测试 10 的 5 次方
# # add_test (test_10_5 Demo 10 5)

# # set_tests_properties (test_10_5
# #  PROPERTIES PASS_REGULAR_EXPRESSION "is 100000")

# # 测试 2 的 10 次方
# # add_test (test_2_10 Demo 2 10)

# # set_tests_properties (test_2_10
# #  PROPERTIES PASS_REGULAR_EXPRESSION "is 1024")

# # 定义一个宏，用来简化测试工作
# macro (do_test arg1 arg2 result)
#   add_test (test_${arg1}_${arg2} Demo ${arg1} ${arg2})
#   set_tests_properties (test_${arg1}_${arg2}
#     PROPERTIES PASS_REGULAR_EXPRESSION ${result})
# endmacro (do_test)

# # 利用 do_test 宏，测试一系列数据
# do_test (5 2 "is 25")
# do_test (10 5 "is 100000")
# do_test (2 10 "is 1024")
